upload-file
import { pristine } from './operate-form';
import { isEscapeKey } from './util';

const body = document.querySelector('body');
const imgUploadForm = document.querySelector('.img-upload__form');
const imgUploadOverlay = imgUploadForm.querySelector('.img-upload__overlay');
const imgUploadInput = imgUploadForm.querySelector('.img-upload__input');
const closeButton = imgUploadForm.querySelector('.img-upload__cancel');
const textHashtag = imgUploadForm.querySelector('.text__hashtags');
const textDescription = imgUploadForm.querySelector('.text__description');

const propagationStop = (evt) => {
  evt.stopPropagation();
};

const closeImgOverlay = () => {
  imgUploadOverlay.classList.remove('hidden');
  body.classList.add('modal-open');
  closeButton.removeEventListener('click', closeButtonListener);
  document.removeEventListener('keydown', escListener);
  textHashtag.removeEventListener('keydown', propagationStop);
  textDescription.removeEventListener('keydown', propagationStop);
};

function escListener(evt) {
  if (isEscapeKey(evt)) {
    imgUploadForm.reset();
    closeImgOverlay();
  }
}

function closeButtonListener() {
  closeImgOverlay();
}

const imageEditor = () => {
  imgUploadOverlay.classList.add('hidden');
  body.classList.remove('modal-open');
  textHashtag.addEventListener('keydown', propagationStop);
  textDescription.addEventListener('keydown', propagationStop);
  closeButton.addEventListener('click', closeButtonListener);
  document.addEventListener('keydown', escListener);
};

imgUploadForm.addEventListener('submit', (evt) => {
  evt.preventDefault();
  if (pristine.validate()) {
    imgUploadForm.submit();
  }
});

imgUploadInput.addEventListener('change', (evt) => {
  evt.preventDefault();
  imageEditor();
});



operate-form
import {MAX_HASHTAG_LENGTH, MAX_DESCRIPTION_LENGTH, HASHTAG_REGEX, MAX_HASHTAG_QUANTITY} from './data';
import {checkLength, checkValuesNotRepeat} from './util';


const imgForm = document.querySelector('.img-upload__form');
const textHashtag = imgForm.querySelector('.text__hashtags');
const textDescription = imgForm.querySelector('.text__description');

const pristine = new Pristine(imgForm, {
  classTo: 'img-upload__field-wrapper',
  errorClass: 'img-upload__field-wrapper--invalid',
  successClass: 'img-upload__field-wrapper--valid',
  errorTextParent: 'img-upload__field-wrapper',
  errorTextTag: 'div',
  errorTextClass: 'form__error'
});

const validateLengthDescription = (value) => checkLength(value, MAX_DESCRIPTION_LENGTH);
const validateHashtagLength = (value) => value.split(' ').length <= MAX_HASHTAG_LENGTH;
const validateHashtagFormat = (value) => {
  if (value !== '') {
    value.split(' ').forEach((hashtag) => {
      if (!HASHTAG_REGEX.test(hashtag)) {
        return false;
      }
    });
  }
  return true;
};
const validateHashtagQuantity = () => checkLength(textHashtag.value.split(' '), MAX_HASHTAG_QUANTITY);
const validateHashtagUninqueness = (value) => checkValuesNotRepeat(value);

pristine.addValidator(
  textDescription,
  validateLengthDescription,
  `Не более ${MAX_DESCRIPTION_LENGTH} символов`
);

pristine.addValidator(
  textHashtag,
  validateHashtagLength,
  `Не более ${MAX_HASHTAG_LENGTH} символов`
);

pristine.addValidator(
  textHashtag,
  validateHashtagFormat,
  'Хэш-тег должен начинаться с # и состоять из букв или цифр'
);

pristine.addValidator(
  textHashtag,
  validateHashtagQuantity,
  `Не более ${MAX_HASHTAG_QUANTITY} хэш-тегов`
);

pristine.addValidator(
  textHashtag,
  validateHashtagUninqueness,
  'Хэш-теги не должны повторяться'
);

export {pristine};

data++
const MAX_HASHTAG_LENGTH = 20;
const MAX_DESCRIPTION_LENGTH = 140;
const HASHTAG_REGEX = /^#[a-zа-яё0-9]/i;
const MAX_HASHTAG_QUANTITY = 5;

export {MESSAGES, NAMES, ARRAY_ID, MAX_HASHTAG_LENGTH, MAX_DESCRIPTION_LENGTH, HASHTAG_REGEX, MAX_HASHTAG_QUANTITY};

util++
const checkLength = (string, maxLength) => string.length <= maxLength;
const checkValuesNotRepeat = (arr) => arr.toLowerCase().split(' ').length === new Set(arr).size;

export {getRandomNumber, getRandomArrayElement, getArrayOfNumber, isEscapeKey, checkLength, checkValuesNotRepeat};
